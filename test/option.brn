type 'a option =
  | None
  | Some of 'a

let a = None
and b = Some 123

let none () = None

let some x = Some x

let value opt default =
  match opt with
  | None => default
  | Some v => v

let bind a f =
  match a with
  | None => None
  | Some v => Some (f v)

let map f a =
  match a with
  | None => None
  | Some a => Some (f a)

let is_none a =
  match a with
  | None => true
  | Some _ => false

let equal f (a : 'a) (b : 'a) =
  match (a, b) with
  | (None, None) => true
  | (Some a, Some b) => f a b
  | _ => false